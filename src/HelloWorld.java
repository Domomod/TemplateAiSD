/* Run this simple example in Linux with following commands:
 * > javacc HelloWorld.java 
 * > javacc HelloFormatter.java
 * This will create a files called "HelloWorld.class" and "HelloFormatter.class"
 * The `.class` file is a compiled bytecode file that is generated by the Java compiler (javac) from a Java source file (.java).
 * It is not machine code for a specific CPU architecture but is designed to be executed by the Java Virtual Machine (JVM).
 *  
 * The Java programming language uses a two-step process for execution: compilation (to JVM bytecode) and interpretation (by JVM machine).
 * 
 * If you want to inspect the bytecode out of curiosity try this command:
 * You are not required to understand the bytecode in this course. 
 * > javap -c HelloWorld.java
 * 
 * If you want to run the code, issue this command:
 * > java HelloWorld
 * 
 * To make compiling faster, a Makefile was prepared for you with following options:
 * > make          - to build the project
 * > make clean    - to clean (remove) the '.class' files (aka. build artifacts)
 * > make run      - to build & run the project
 * > make bytecode - to inspect the bytecode (you won't need it but curiosity is a virtue)
 * 
 * In addition you are also provided with a launch.json task 'Debug Java hello_world' that launches a debug task in VS Code.
**/

public class HelloWorld {
    public static void main(String[] args) {
        // Call the function from the other file
        String formattedHello = HelloFormatter.getFormattedHello();

        // Print the returned string
        System.out.println(formattedHello);
    }
}